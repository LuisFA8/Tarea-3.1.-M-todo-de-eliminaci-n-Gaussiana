# -*- coding: utf-8 -*-
"""Ejercicio3_Tarea3_1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zwt11jW3bXl8vFnv-9qI9M0qcEeW5uxj
"""

import numpy as np

def eliminacion_gaussiana(matriz, vector):
    matriz = matriz.copy()  # Copia para preservar la original
    vector = vector.copy()  # Copia del vector de términos independientes
    n = len(vector)  # Número de ecuaciones

    for i in range(n):
        # Pivoteo parcial para mejorar estabilidad numérica
        fila_max = i + np.argmax(np.abs(matriz[i:, i]))
        if fila_max != i:
            matriz[[i, fila_max], :] = matriz[[fila_max, i], :].copy()  # Intercambio de filas
            vector[[i, fila_max]] = vector[[fila_max, i]].copy()

        # Proceso de eliminación hacia adelante
        for j in range(i + 1, n):
            factor = matriz[j, i] / matriz[i, i]
            matriz[j, i:] -= factor * matriz[i, i:]
            vector[j] -= factor * vector[i]

    # Sustitución regresiva para obtener la solución
    solucion = np.zeros(n)
    for i in range(n - 1, -1, -1):
        solucion[i] = (vector[i] - np.dot(matriz[i, i + 1:], solucion[i + 1:])) / matriz[i, i]

    return solucion

# Definir una matriz de coeficientes 6x6 y un vector de términos independientes
matriz_coef = np.array([
    [1, 2, -3, 4, -1, 1],
    [-2, 3, 5, -1, 2, -1],
    [4, -1, 2, 6, -3, 1],
    [-3, 5, -1, 2, 4, -1],
    [2, -4, 6, -5, 1, 3],
    [-5, 1, 4, -1, 2, -6]
], dtype=float)

vector_indep = np.array([7, -2, 10, 3, -8, 5], dtype=float)

# Resolver el sistema de ecuaciones
solucion = eliminacion_gaussiana(matriz_coef, vector_indep)

# Mostrar la solución
print("Solución del sistema:")
print(solucion)